/*
 * CastadivaGUI.java
 *
 * Created on 12 de agosto de 2006, 12:57
 */

package castadiva_gui;

import castadiva.*;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JPanel;


/**
 *
 * @author  jorge
 */
public class MainMenuGUI extends javax.swing.JFrame {
    private CastadivaModel m_model;
    private LogoFrame logo;
    
    /** Creates new form CastadivaGUI */
    public MainMenuGUI(CastadivaModel model) {
        m_model = model;
        //Frame cosa = new Viewer("images/grc.jpg");
        initComponents();
        setLocation((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()/2-(int)(this.getWidth()/2), (int)Toolkit.getDefaultToolkit().getScreenSize().getHeight()/2-(int)(this.getHeight()/2));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        CreateLogo();
    }
    
    
    public void CreateLogo(){
        logo = new LogoFrame(LogoPanel);
        logo.setPreferredSize(new Dimension(LogoPanel.getWidth(),LogoPanel.getHeight()));
        LogoPanel.add(logo,0);
    }
    
    
    public void addImportNsListener(ActionListener al){
        NSImportMenuItem.addActionListener(al);
    }
    
    public void addExportNsListener(ActionListener al){
        NSExportMenuItem.addActionListener(al);
    }
    
    public void addExportMayaListener(ActionListener al){
        MayaExportMenuItem.addActionListener(al);
    }
    
    public void addNewListener(ActionListener al){
        NewMenuItem.addActionListener(al);
    }
    
    public void addLoadListener(ActionListener al){
        LoadMenuItem.addActionListener(al);
    }
    
    public void addLoadScenaryListener(ActionListener al){
        LoadScenarioMenuItem.addActionListener(al);
    }
    
    public void addSaveListener(ActionListener al){
        SaveMenuItem.addActionListener(al);
    }
    
    public void addSimulationMenuOption(ActionListener al){
        SimulationMenuItem.addActionListener(al);
    }
    
    public void addNewApOption(ActionListener al){
        AddAPMenuItem.addActionListener(al);
    }
    
    public void addModifyApOption(ActionListener al){
        ModifyAPMenuItem.addActionListener(al);
    }

    public void addSaveApOption(ActionListener al) {
        SaveAPsMenuItem.addActionListener(al);
    }

    public void addLoadApOption(ActionListener al) {
        LoadAPsMenuItem.addActionListener(al);
    }
    
    public void addInstallButtonListener(ActionListener al){
        InstallApMenuItem.addActionListener(al);
    }
    
    public void addAboutBoxListener(ActionListener al){
        AboutBoxMenuItem.addActionListener(al);
    }
    
    public void addComputerConfigurationListener(ActionListener al){
        ComputerMenuItem.addActionListener(al);
    }
    
    public void addRandomSimulationListener(ActionListener al){
        RandomSimulationMenuItem.addActionListener(al);
    }
    
    
    public void addExternalDeviceListener(ActionListener al){
        AttachExternalTrafficMenuItem.addActionListener(al);
    }
    
    public void addHelpWindowListener(ActionListener al){
        HelpWindowMenuItem.addActionListener(al);
    }
    
    public void addProtocolsListener(ActionListener a1) {
        ProtocolMenuItem.addActionListener(a1);
    }
    
    public void addExecutionPlannerListener(ActionListener al){
        ExecutionPlannerMenuItem.addActionListener(al);
    }

    public void addMobilityDesignerListener(ActionListener al){
        MobilityDesignerMenuItem.addActionListener(al);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogoPanel = new javax.swing.JPanel();
        MainMenuBar = new javax.swing.JMenuBar();
        ApplicationMenu = new javax.swing.JMenu();
        NewMenuItem = new javax.swing.JMenuItem();
        LoadMenuItem = new javax.swing.JMenuItem();
        LoadScenarioMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        ImportMenu = new javax.swing.JMenu();
        NSImportMenuItem = new javax.swing.JMenuItem();
        ImportCitymob = new javax.swing.JMenuItem();
        ExportMenu = new javax.swing.JMenu();
        MayaExportMenuItem = new javax.swing.JMenuItem();
        NSExportMenuItem = new javax.swing.JMenuItem();
        ExitMenuItem = new javax.swing.JMenuItem();
        SimulationMenu = new javax.swing.JMenu();
        SimulationMenuItem = new javax.swing.JMenuItem();
        RandomSimulationMenuItem = new javax.swing.JMenuItem();
        ExecutionPlannerMenuItem = new javax.swing.JMenuItem();
        ConfigurationMenu = new javax.swing.JMenu();
        ComputerMenuItem = new javax.swing.JMenuItem();
        AddAPMenuItem = new javax.swing.JMenuItem();
        ModifyAPMenuItem = new javax.swing.JMenuItem();
        SaveAPsMenuItem = new javax.swing.JMenuItem();
        LoadAPsMenuItem = new javax.swing.JMenuItem();
        InstallApMenuItem = new javax.swing.JMenuItem();
        AttachExternalTrafficMenuItem = new javax.swing.JMenuItem();
        ProtocolMenuItem = new javax.swing.JMenuItem();
        MobilityDesignerMenuItem = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HelpWindowMenuItem = new javax.swing.JMenuItem();
        AboutBoxMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CASTADIVA");
        setResizable(false);

        LogoPanel.setLayout(new java.awt.BorderLayout());

        ApplicationMenu.setText("Application");

        NewMenuItem.setText("New");
        ApplicationMenu.add(NewMenuItem);

        LoadMenuItem.setText("Load");
        ApplicationMenu.add(LoadMenuItem);

        LoadScenarioMenuItem.setText("Load Scenario");
        LoadScenarioMenuItem.setToolTipText("Only load a scenario");
        ApplicationMenu.add(LoadScenarioMenuItem);

        SaveMenuItem.setText("Save");
        ApplicationMenu.add(SaveMenuItem);

        ImportMenu.setText("Import");

        NSImportMenuItem.setText("NS-2");
        ImportMenu.add(NSImportMenuItem);

        ImportCitymob.setText("CityMob Scenario");
        ImportMenu.add(ImportCitymob);

        ApplicationMenu.add(ImportMenu);

        ExportMenu.setText("Export");

        MayaExportMenuItem.setText("Maya");
        ExportMenu.add(MayaExportMenuItem);

        NSExportMenuItem.setText("NS-2");
        ExportMenu.add(NSExportMenuItem);

        ApplicationMenu.add(ExportMenu);

        ExitMenuItem.setText("Exit");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        ApplicationMenu.add(ExitMenuItem);

        MainMenuBar.add(ApplicationMenu);

        SimulationMenu.setText("Simulation");

        SimulationMenuItem.setText("Generate Simulation");
        SimulationMenu.add(SimulationMenuItem);

        RandomSimulationMenuItem.setText("Random Simulation");
        SimulationMenu.add(RandomSimulationMenuItem);

        ExecutionPlannerMenuItem.setText("Execution Planner");
        SimulationMenu.add(ExecutionPlannerMenuItem);

        MainMenuBar.add(SimulationMenu);

        ConfigurationMenu.setText("Configuration");

        ComputerMenuItem.setText("Configurate the Computer");
        ConfigurationMenu.add(ComputerMenuItem);

        AddAPMenuItem.setText("Add Access Point");
        ConfigurationMenu.add(AddAPMenuItem);

        ModifyAPMenuItem.setText("Modify an AP");
        ConfigurationMenu.add(ModifyAPMenuItem);

        SaveAPsMenuItem.setText("Save AP list");
        ConfigurationMenu.add(SaveAPsMenuItem);

        LoadAPsMenuItem.setText("Load AP list");
        ConfigurationMenu.add(LoadAPsMenuItem);

        InstallApMenuItem.setText("Install an OpenWRT AP");
        ConfigurationMenu.add(InstallApMenuItem);

        AttachExternalTrafficMenuItem.setText("Attach External Traffic");
        ConfigurationMenu.add(AttachExternalTrafficMenuItem);

        ProtocolMenuItem.setText("Protocols");
        ProtocolMenuItem.setName("ProtocolMenuItem"); // NOI18N
        ProtocolMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProtocolMenuItemActionPerformed(evt);
            }
        });
        ConfigurationMenu.add(ProtocolMenuItem);

        MobilityDesignerMenuItem.setText("Mobility Designer");
        ConfigurationMenu.add(MobilityDesignerMenuItem);

        MainMenuBar.add(ConfigurationMenu);

        HelpMenu.setText("Help");

        HelpWindowMenuItem.setText("Help");
        HelpMenu.add(HelpWindowMenuItem);

        AboutBoxMenuItem.setText("About ...");
        HelpMenu.add(AboutBoxMenuItem);

        MainMenuBar.add(HelpMenu);

        setJMenuBar(MainMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(LogoPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(LogoPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        System.out.println("");
        System.out.println("End.");
        System.out.println("");
        System.exit(0);
    }//GEN-LAST:event_ExitMenuItemActionPerformed

private void ProtocolMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProtocolMenuItemActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_ProtocolMenuItemActionPerformed
    

    //CityMob

    public void addImportNsCitymob(ActionListener al){
        ImportCitymob.addActionListener(al);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutBoxMenuItem;
    private javax.swing.JMenuItem AddAPMenuItem;
    private javax.swing.JMenu ApplicationMenu;
    private javax.swing.JMenuItem AttachExternalTrafficMenuItem;
    private javax.swing.JMenuItem ComputerMenuItem;
    private javax.swing.JMenu ConfigurationMenu;
    private javax.swing.JMenuItem ExecutionPlannerMenuItem;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JMenu ExportMenu;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem HelpWindowMenuItem;
    private javax.swing.JMenuItem ImportCitymob;
    private javax.swing.JMenu ImportMenu;
    private javax.swing.JMenuItem InstallApMenuItem;
    private javax.swing.JMenuItem LoadAPsMenuItem;
    private javax.swing.JMenuItem LoadMenuItem;
    private javax.swing.JMenuItem LoadScenarioMenuItem;
    private javax.swing.JPanel LogoPanel;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JMenuItem MayaExportMenuItem;
    private javax.swing.JMenuItem MobilityDesignerMenuItem;
    private javax.swing.JMenuItem ModifyAPMenuItem;
    private javax.swing.JMenuItem NSExportMenuItem;
    private javax.swing.JMenuItem NSImportMenuItem;
    private javax.swing.JMenuItem NewMenuItem;
    private javax.swing.JMenuItem ProtocolMenuItem;
    private javax.swing.JMenuItem RandomSimulationMenuItem;
    private javax.swing.JMenuItem SaveAPsMenuItem;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JMenu SimulationMenu;
    private javax.swing.JMenuItem SimulationMenuItem;
    // End of variables declaration//GEN-END:variables
    
    
    class LogoFrame extends JPanel{
        Image logo;
        JPanel parent;
        Integer zoom = 6;
        
        public LogoFrame(JPanel container){
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            logo = toolkit.getImage("images/grc.gif");
            parent = container;
        }
        
        @Override
        public void paint(Graphics screen) {
            int iWidth = logo.getWidth(this);
            int iHeight = logo.getHeight(this);
            int xPos = parent.getWidth() - logo.getWidth(this)/zoom;
            int yPos = parent.getHeight() - logo.getHeight(this)/zoom;
            screen.drawImage(logo, xPos, yPos,
                    iWidth / zoom, iHeight / zoom, this);
        }
    }
}
