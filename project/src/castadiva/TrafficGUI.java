/*
 * TrafficWindow.java
 *
 * Created on 7 de junio de 2006, 10:04
 */

package castadiva;

import castadiva.CastadivaModel.TrafficTableModel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
//import castadiva.TrafficForm;
import java.lang.*;

/**
 *
 * @author  jorge
 */



public class TrafficGUI extends javax.swing.JFrame {
    CastadivaModel m_model;
    TrafficForm trafficTable;
    JComboBox APComboBox = new JComboBox();
    
    
    public TrafficGUI(CastadivaModel model){
        initComponents();
        setLocation((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()/2-(int)(this.getWidth()/2),
                (int)Toolkit.getDefaultToolkit().getScreenSize().getHeight()/2-(int)(this.getHeight()/2));
        m_model = model;
        ChangeConsoleText("Waiting...");
    }
    
    public void UpdateTable(){
        FillAPComboBox();
        GenerateTable(m_model.accessPoints.GetTraffic());
    }
    
    void FillAPComboBox(){
        try{
            APComboBox.removeAllItems();
            for(int i=0;i<m_model.HowManyAP();i++){
                APComboBox.addItem(m_model.GetAP(i).WhatAP());
            }
        }catch(NullPointerException npe){}
    }
    
    void GenerateTable(Vector data){
        JComboBox TCPUDPComboBox = new JComboBox();
        trafficTable = new TrafficForm(data);
        TableScrollPane.setViewportView(trafficTable);
        SetUpColumnAP(TrafficTableModel.SOURCE_INDEX);
        SetUpColumnAP(TrafficTableModel.ADDRESS_INDEX);
        
        //Adding the UDP/TCP selection menu.
        TCPUDPComboBox.addItem("UDP");
        TCPUDPComboBox.addItem("TCP");
        
        trafficTable.table.getColumnModel().getColumn(TrafficTableModel.TCPUDP_INDEX).
                setCellEditor(new DefaultCellEditor(TCPUDPComboBox));
        trafficTable.setVisible(false);
        trafficTable.setVisible(true);
    }
    
    void FillAveragePanel(Float UdpText, Float TcpText){
        UdpAverageTextField.setText(UdpText.toString());
        ThroughputAverageTextField.setText(TcpText.toString());
    }
    
    private void SetUpColumnAP(int where){
        trafficTable.table.getColumnModel().getColumn(where).setCellEditor(new DefaultCellEditor(APComboBox));
    }
    
    public Integer GetSelectedRow(){
        return trafficTable.table.getSelectedRow();
    }
    
    public void ShowError(String text, String title){
        JFrame frame = new JFrame();
        JOptionPane.showMessageDialog(frame, text, title, JOptionPane.ERROR_MESSAGE);
    }
    
    private void ChangeConsoleText(String text){
        ConsoleTextField.setText(text);
    }
    
    public void ActivateWindow(){
         ChangeConsoleText("Simulation finished!");
         m_model.tableModel.SetEnable(true);
         if(m_model.accessPoints.GetTrafficSize()>0){
            setVisible(false);
            setVisible(true);
         }
    }
    
    public void DisableWindow(){
        ChangeConsoleText("Simulation in process...");
        m_model.tableModel.SetEnable(false);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        TableScrollPane = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        TableModificationPanel = new javax.swing.JPanel();
        DuplicateButton = new javax.swing.JButton();
        DelRowButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        OrderButton = new javax.swing.JButton();
        WindowControlPanel = new javax.swing.JPanel();
        SaveInTextFileButton = new javax.swing.JButton();
        AcceptButton = new javax.swing.JButton();
        AveragePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        UdpAverageTextField = new javax.swing.JTextField();
        ThroughputAverageTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        StatusPanel = new javax.swing.JPanel();
        ConsoleTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setTitle("CASTADIVA - TRAFFIC");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18));
        jLabel1.setText("Traffic Control");

        TableModificationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        DuplicateButton.setText("Duplicate Row");
        DuplicateButton.setToolTipText("Duplicate the selected row.");

        DelRowButton.setText("Delete row");

        ClearButton.setText("Delete all");

        OrderButton.setText("Order traffic");
        OrderButton.setToolTipText("Order the traffic by starting time.");

        org.jdesktop.layout.GroupLayout TableModificationPanelLayout = new org.jdesktop.layout.GroupLayout(TableModificationPanel);
        TableModificationPanel.setLayout(TableModificationPanelLayout);
        TableModificationPanelLayout.setHorizontalGroup(
            TableModificationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(TableModificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(TableModificationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(TableModificationPanelLayout.createSequentialGroup()
                        .add(DuplicateButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(DelRowButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, TableModificationPanelLayout.createSequentialGroup()
                        .add(OrderButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ClearButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))
                .addContainerGap())
        );
        TableModificationPanelLayout.setVerticalGroup(
            TableModificationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(TableModificationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(TableModificationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DuplicateButton)
                    .add(DelRowButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(TableModificationPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ClearButton)
                    .add(OrderButton))
                .addContainerGap())
        );

        WindowControlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SaveInTextFileButton.setText("Save in text file");

        AcceptButton.setText("Close");

        org.jdesktop.layout.GroupLayout WindowControlPanelLayout = new org.jdesktop.layout.GroupLayout(WindowControlPanel);
        WindowControlPanel.setLayout(WindowControlPanelLayout);
        WindowControlPanelLayout.setHorizontalGroup(
            WindowControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(WindowControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(WindowControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(SaveInTextFileButton)
                    .add(AcceptButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WindowControlPanelLayout.setVerticalGroup(
            WindowControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(WindowControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(SaveInTextFileButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(AcceptButton)
                .addContainerGap())
        );

        AveragePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setText("UDP Packets Reveived:");

        jLabel4.setText("Average Throguhput:");

        UdpAverageTextField.setText("0");

        ThroughputAverageTextField.setText("0");

        jLabel5.setText("%");

        jLabel6.setText("Kb/s");

        org.jdesktop.layout.GroupLayout AveragePanelLayout = new org.jdesktop.layout.GroupLayout(AveragePanel);
        AveragePanel.setLayout(AveragePanelLayout);
        AveragePanelLayout.setHorizontalGroup(
            AveragePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AveragePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(AveragePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(AveragePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(AveragePanelLayout.createSequentialGroup()
                        .add(ThroughputAverageTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel6)
                        .addContainerGap())
                    .add(AveragePanelLayout.createSequentialGroup()
                        .add(UdpAverageTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel5)
                        .add(34, 34, 34))))
        );
        AveragePanelLayout.setVerticalGroup(
            AveragePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, AveragePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(AveragePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(AveragePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(UdpAverageTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel3))
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 24, Short.MAX_VALUE)
                .add(AveragePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(ThroughputAverageTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addContainerGap())
        );

        StatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ConsoleTextField.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16));
        jLabel2.setText("Status:");

        org.jdesktop.layout.GroupLayout StatusPanelLayout = new org.jdesktop.layout.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(StatusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ConsoleTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addContainerGap())
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(StatusPanelLayout.createSequentialGroup()
                .add(33, 33, 33)
                .add(StatusPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(ConsoleTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(TableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1209, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(522, 522, 522)
                        .add(jLabel1))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(TableModificationPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(StatusPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(AveragePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(WindowControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(TableScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 303, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, AveragePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, WindowControlPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(StatusPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(TableModificationPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    void addDelRowButtonListener(ActionListener al){
        DelRowButton.addActionListener(al);
    }
    
    
    void addDuplicateActionListener(ActionListener al){
        DuplicateButton.addActionListener(al);
    }
    
    
    void addClearButtonListener(ActionListener al){
        ClearButton.addActionListener(al);
    }
    
    
    void addAcceptButtonListener(ActionListener al){
        AcceptButton.addActionListener(al);
    }
    
    
    void addOrderButtonListener(ActionListener al){
        OrderButton.addActionListener(al);
    }
    
    
    void addSaveInTextFileButtonListener(ActionListener al){
        SaveInTextFileButton.addActionListener(al);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AcceptButton;
    private javax.swing.JPanel AveragePanel;
    private javax.swing.JButton ClearButton;
    private javax.swing.JTextField ConsoleTextField;
    private javax.swing.JButton DelRowButton;
    private javax.swing.JButton DuplicateButton;
    private javax.swing.JButton OrderButton;
    private javax.swing.JButton SaveInTextFileButton;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JPanel TableModificationPanel;
    private javax.swing.JScrollPane TableScrollPane;
    private javax.swing.JTextField ThroughputAverageTextField;
    private javax.swing.JTextField UdpAverageTextField;
    private javax.swing.JPanel WindowControlPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
    
    
    public class TrafficForm extends JPanel {
        public JTable table;
        protected JScrollPane scroller;
        public int column;
        public int row;
        
        public TrafficForm(Vector vectorDatos) {
            initComponent();
        }
        
        public void initComponent() {
            m_model.tableModel.addTableModelListener(new TrafficForm.InteractiveTableModelListener());
            table = new JTable();
            //table.setColumnSelectionAllowed(true);
            table.setRowSelectionAllowed(true);
            table.setModel(m_model.tableModel);
            table.setSurrendersFocusOnKeystroke(true);
            if (!m_model.tableModel.hasEmptyRow()) {
                m_model.tableModel.addEmptyRow();
            }
            //Table column size.
            TableColumn number = table.getColumnModel().getColumn(TrafficTableModel.NUMBER_INDEX);
            number.setMinWidth(20);
            number.setPreferredWidth(30);
            number.setMaxWidth(30);
            
            TableColumn transferSize = table.getColumnModel().getColumn(TrafficTableModel.TRANSFERSIZE_INDEX);
            transferSize.setMinWidth(70);
            transferSize.setPreferredWidth(110);
            transferSize.setMaxWidth(140);
            transferSize.setCellRenderer(new NotEditableTableCellRenderer());
            
            TableColumn start = table.getColumnModel().getColumn(TrafficTableModel.START_INDEX);
            start.setMinWidth(20);
            start.setPreferredWidth(50);
            start.setCellRenderer(new NotEditableTableCellRenderer());
            
            TableColumn stop = table.getColumnModel().getColumn(TrafficTableModel.STOP_INDEX);
            stop.setMinWidth(20);
            stop.setPreferredWidth(50);
            stop.setCellRenderer(new NotEditableTableCellRenderer());
            
            TableColumn source = table.getColumnModel().getColumn(TrafficTableModel.SOURCE_INDEX);
            source.setMinWidth(40);
            source.setPreferredWidth(100);
            
            TableColumn address = table.getColumnModel().getColumn(TrafficTableModel.ADDRESS_INDEX);
            address.setMinWidth(40);
            address.setPreferredWidth(100);
            
            TableColumn speed = table.getColumnModel().getColumn(TrafficTableModel.SPEED_INDEX);
            speed.setMinWidth(70);
            speed.setPreferredWidth(100);
            speed.setCellRenderer(new NotEditableTableCellRenderer());
            
            TableColumn size = table.getColumnModel().getColumn(TrafficTableModel.SIZE_INDEX);
            size.setCellRenderer(new NotEditableTableCellRenderer());
            
            TableColumn duration = table.getColumnModel().getColumn(TrafficTableModel.SEC_INDEX);
            duration.setCellRenderer(new NotEditableTableCellRenderer());
            
            TableColumn total = table.getColumnModel().getColumn(TrafficTableModel.MAX_INDEX);
            total.setCellRenderer(new NotEditableTableCellRenderer());
            
            TableColumn received = table.getColumnModel().getColumn(TrafficTableModel.RECEIVED_INDEX);
            received.setCellRenderer(new NotEditableTableCellRenderer());
            
            scroller = new javax.swing.JScrollPane(table);
            table.setPreferredScrollableViewportSize(new java.awt.Dimension(50, 30));
            TableColumn hidden = table.getColumnModel().getColumn(TrafficTableModel.HIDDEN_INDEX);
            hidden.setMinWidth(1);
            hidden.setPreferredWidth(1);
            hidden.setMaxWidth(1);
            hidden.setCellRenderer(new InteractiveRenderer(TrafficTableModel.HIDDEN_INDEX));
            
            setLayout(new BorderLayout());
            add(scroller, BorderLayout.CENTER);
        }
        
        public void highlightLastRow(int row) {
            int lastrow = m_model.tableModel.getRowCount();
            if (row == lastrow - 1) {
                table.setRowSelectionInterval(lastrow - 1, lastrow - 1);
            } else {
                table.setRowSelectionInterval(row + 1, row + 1);
            }
            table.setColumnSelectionInterval(0, 0);
        }
        
        class InteractiveRenderer extends DefaultTableCellRenderer {
            protected int interactiveColumn;
            
            public InteractiveRenderer(int interactiveColumn) {
                this.interactiveColumn = interactiveColumn;
            }
            
            @Override
            public Component getTableCellRendererComponent
                    (JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row,int column) {
                Component c = super.getTableCellRendererComponent
                        (table, value, isSelected, hasFocus, row, column);
                if (column == interactiveColumn && hasFocus) {
                    if ((m_model.tableModel.getRowCount() - 1) == row &&
                            !m_model.tableModel.hasEmptyRow()) {
                        m_model.tableModel.addEmptyRow();
                    }
                    highlightLastRow(row);
                }
                return c;
            }
        }
        
        public class NotEditableTableCellRenderer extends DefaultTableCellRenderer {
            @Override
            public Component getTableCellRendererComponent
                    (JTable table, Object value, boolean isSelected,
                    boolean hasFocus, int row, int column) {
                    Component cell = super.getTableCellRendererComponent
                            (table, value, isSelected, hasFocus, row, column);
                  try{
                    if(!table.isCellEditable(row,column)) {
                        cell.setForeground(Color.lightGray);
                    }else{
                        cell.setForeground(Color.black);
                    }
                    
                    if(column == TrafficTableModel.SPEED_INDEX ||
                            (column == TrafficTableModel.RECEIVED_INDEX &&
                            table.getValueAt(row,TrafficTableModel.TCPUDP_INDEX)=="UDP")){
                        cell.setForeground(Color.BLUE);
                    }
                    
                    if((column == TrafficTableModel.START_INDEX ||
                            column == TrafficTableModel.STOP_INDEX) &&
                            (Integer)table.getValueAt(row,TrafficTableModel.START_INDEX) >=
                            (Integer)table.getValueAt(row,TrafficTableModel.STOP_INDEX)){
                        cell.setForeground(Color.RED);
                        table.setValueAt(0,row,TrafficTableModel.START_INDEX);
                    }
                    
                    if(column == TrafficTableModel.MAX_INDEX &&
                            (Integer)table.getValueAt(row,TrafficTableModel.MAX_INDEX) <
                            (Integer)table.getValueAt(row,TrafficTableModel.SEC_INDEX)){
                        cell.setForeground(Color.RED);
                    }
                    
                    //Max Packets are equal a time per packets/second.
                    if(((((Integer)table.getValueAt(row,TrafficTableModel.STOP_INDEX)) -
                            ((Integer)table.getValueAt(row,TrafficTableModel.START_INDEX))) *
                            ((Integer)table.getValueAt(row,TrafficTableModel.SEC_INDEX)) !=
                            ((Integer)table.getValueAt(row,TrafficTableModel.MAX_INDEX)))){
                        Integer maxPackets = ((Integer)table.getValueAt(row,TrafficTableModel.STOP_INDEX) -
                                (Integer)table.getValueAt(row,TrafficTableModel.START_INDEX)) *
                                (Integer)table.getValueAt(row,TrafficTableModel.SEC_INDEX);
                        table.setValueAt((int)maxPackets,row,TrafficTableModel.MAX_INDEX);
                    }
                    
                    table.setColumnSelectionInterval(0,table.getColumnCount()-1);
                    return cell;
                }catch(ClassCastException cce){
                    return cell;
                }
            }
        }
        
        public class InteractiveTableModelListener implements TableModelListener {
            public void tableChanged(TableModelEvent evt) {
                column = evt.getColumn();
                row = evt.getFirstRow();
                if (evt.getType() == TableModelEvent.UPDATE) {
                    table.setColumnSelectionInterval(column + 1, column + 1);
                    table.setRowSelectionInterval(row, row);
                }
                //Adding a new line where the last one is full.
                if (!m_model.tableModel.hasEmptyRow()) {
                    m_model.tableModel.addEmptyRow();
                }
            }
        }
        
        public void delRow(){
            m_model.tableModel.delRow(row);
            if (!m_model.tableModel.hasEmptyRow()) {
                m_model.tableModel.addEmptyRow();
            }
        }
    }
}
